<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-01-27T18:58:56+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">H00die’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">블로그 생성</title><link href="http://localhost:4000/2019/01/27/opene-blog.html" rel="alternate" type="text/html" title="블로그 생성" /><published>2019-01-27T00:00:00+09:00</published><updated>2019-01-27T00:00:00+09:00</updated><id>http://localhost:4000/2019/01/27/opene-blog</id><content type="html" xml:base="http://localhost:4000/2019/01/27/opene-blog.html">&lt;p&gt;블로그를 만들어 봤습니다!&lt;/p&gt;

&lt;p&gt;현재 소프트웨어계열 고등학교에 입학하는 03년 생이고&lt;/p&gt;

&lt;p&gt;3년동안(?) 회고록 같은 것도 작성해보고&lt;/p&gt;

&lt;p&gt;jekyll을 이용하여 블로그를 만들어봅니다.&lt;/p&gt;</content><author><name>H00die</name></author><category term="blog" /><summary type="html">블로그를 만들어 봤습니다!</summary></entry><entry><title type="html">인공지능, 머신러닝, 딥러닝 뭐가 다른거야?</title><link href="http://localhost:4000/ai/2019/01/10/What-is-AI.html" rel="alternate" type="text/html" title="인공지능, 머신러닝, 딥러닝 뭐가 다른거야?" /><published>2019-01-10T19:01:30+09:00</published><updated>2019-01-10T19:01:30+09:00</updated><id>http://localhost:4000/ai/2019/01/10/What-is-AI</id><content type="html" xml:base="http://localhost:4000/ai/2019/01/10/What-is-AI.html">&lt;h2 id=&quot;요즘-뉴스를-보면-인공-지능이-너무-자주-보인다&quot;&gt;요즘 뉴스를 보면 인공 지능이 너무 자주 보인다.&lt;/h2&gt;

&lt;p&gt;2016년 알파고의 등장 이후, 미디어에서 인공 지능과 관련된 뉴스들이 두드러지게 보도가 되고 있다. 몇 가지 간추려보자면&lt;/p&gt;

&lt;p&gt;1) 테슬라와 현대 등 자동차 업계에서 주도하는 &lt;strong&gt;자율 주행 자동차&lt;/strong&gt;&lt;br /&gt;
2) 카카오톡이나 슬랙 등에 붙이는 &lt;strong&gt;챗봇&lt;/strong&gt;&lt;br /&gt;
3) KT 기가지니와 SKT 누구 등 음성을 인식하고 명령을 수행하는 &lt;strong&gt;음성 비서&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;등 다양한 산업에서 이용되고 있다. 필자도 이러한 흐름에 몸을 맡겨 최근에 인공지능 공부를 시작했다. 인공지능 공부를 하기 위해 알아보고 있을 때, 머신러닝과 딥러닝이 어떤 차이를 가지고 있는 지 알아보게 되었고 이를 정리하기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;인공-지능과-머신-러닝&quot;&gt;인공 지능과 머신 러닝&lt;/h2&gt;

&lt;p&gt;인공 지능(Artificial Intelligence, AI)이라는 개념은 1956년 미국 다트머스 대학에 있던 존 매카시 교수가 개최한 다트머스 회의에서 처음 등장했으며, 최근 몇 년 사이 폭발적으로 성장하고 있다. 특히 2015년 이후 신속하고 강력한 병렬 처리 성능을 제공하는 GPU의 도입으로 더욱 가속화되고 있다. 갈수록 폭발적으로 늘어나고 있는 저장 용량과 이미지, 텍스트, 매핑 데이터 등 모든 영역의 데이터가 범람하게 된 ‘빅데이터’ 시대의 도래도 이러한 성장세에 큰 영향을 미쳤다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1956년 당시 인공 지능의 선구자들이 “컴퓨터가 ‘생각’할 수 있는가?”라는 질문을 하면서 시작되었다. 이 질문의 답은 오늘날에도 여전히 찾고 있다. 이 분야에 대한 간결한 정의는 &lt;strong&gt;보통의 사람이 수행하는 지능적인 작업을 자동화하기 위한 연구 활동&lt;/strong&gt;이다. 이처럼 인공지능은 머신러닝과 딥러닝을 포괄하는 종합적인 분야이다.&lt;/p&gt;

&lt;p&gt;아주 오랜 기간 동안 많은 전문가는 프로그래머들이 명시적인 규칙을 충분하게 많이 만들어 지식을 다루면 인간 수준의 인공 지능을 만들 수 있다고 믿었는데, 이러한 접근 방법을 &lt;strong&gt;심볼릭 AI&lt;/strong&gt;라고 한다. 이 방법은 1950년대부터 1980년대까지 AI 분야의 지배적인 패러다임이었다. 하지만 체스 게임과 같이 잘 정의된 논리적인 문제를 푸는데는 적합하다는 것이 증명되었지만, 이미지 분류, 음성 인식, 언어 번역과 같은 복잡하고 불분명한 문제를 해결하기 위한 명확한 규칙을 찾는 것에는 적합하지 않았다. 이러한 심볼릭 AI를 대체하기 위해 나온 방법이 바로 &lt;strong&gt;머신 러닝(Machine Learning)&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;머신 러닝은 기본적으로 알고리즘을 이용해 데이터를 분석하고, 분석을 통해 학습하며, 학습한 내용을 기반으로 판단이나 예측을 한다. 따라서 궁극적으로는 의사 결정 기준에 대한 구체적인 지침을 소프트웨어에 직접 코딩해 넣는 것이 아닌, 대량의 데이터와 알고리즘을 통해 컴퓨터 그 자체를 ‘학습’시켜 작업 수행 방법을 익히는 것을 목표로 한다.&lt;/p&gt;

&lt;p&gt;현재 머신 러닝은 컴퓨터 비전 등의 분야에서 큰 성과를 이뤄내고 있으나, 구체적인 지침이 아니더라도 인공 지능을 구현하는 과정 전반에 &lt;strong&gt;일정량의 코딩 작업이 수반된다는 한계점에 봉착하기도 했다.&lt;/strong&gt; 가령 머신 러닝 시스템을 기반으로 정지 표지판의 이미지를 인식할 경우, 개발자는 물체의 시작과 끝 부분을 프로그램으로 식별하는 경계 감지 필터, 물체의 면을 확인하는 형상 감지, ‘S-T-O-P’와 같은 문자를 인식하는 분류기 등을 직접 코딩으로 제작해야 한다. 이처럼 머신 러닝은 ‘코딩’된 분류기로부터 이미지를 인식하고, 알고리즘을 통해 정지 표지판을 ‘학습’하는 방식으로 작동된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;머신러닝은 개념으로써, 컴퓨터가 스스로 학습하는 것을 말한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;딥-러닝&quot;&gt;딥 러닝&lt;/h2&gt;

&lt;p&gt;초기 머신 러닝 연구자들이 만들어 낸 또 다른 알고리즘인 &lt;strong&gt;인공 신경망(Artificial Neural Network)&lt;/strong&gt; 에 영감을 준 것은 인간의 뇌가 지닌 생물학적 특성, 특히 뉴런의 연결 구조였다. 그러나 물리적으로 근접한 어떤 뉴런이든 상호 연결이 가능한 뇌와는 달리, 인공 신경망은 레이어 연결 및 데이터 전파 방향이 일정하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;딥 러닝(Deep Learning)&lt;/strong&gt; 은 인공신경망에서 발전한 형태의 인공 지능으로, 뇌의 뉴런과 유사한 정보 입출력 계층을 활용해 데이터를 학습한다. 그러나 기본적인 신경망조차 굉장한 양의 연산을 필요로 하는 탓에 딥러닝의 상용화는 초기부터 난관에 부딪혔다. 하지만 2012년 이후에는 하드웨어 성능의 폭발적 향상, 알고리즘 향상, 인터넷 성장에 따른 데이터셋 수집의 용이성 등으로 인해 진정한 딥러닝 기반 인공 지능의 등장을 불러왔다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;딥러닝으로 대표되는 인공신경망은 머신러닝을 구현하는 기술 중 하나.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;정리하자면&quot;&gt;정리하자면&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;인공지능 &amp;gt; 머신러닝 &amp;gt; 딥러닝
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고-문헌-및-서적&quot;&gt;참고 문헌 및 서적&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.nvidia.co.kr/2016/08/03/difference_ai_learning_machinelearning/&quot;&gt;인공 지능과 머신 러닝, 딥 러닝의 차이점을 알아보자, Nvidia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;케라스 창시자에게 배우는 딥러닝, 프랑소와 숄레&lt;/li&gt;
  &lt;li&gt;골빈해커의 3분 딥러닝 텐서플로맛, 김진중&lt;/li&gt;
&lt;/ul&gt;</content><author><name>devsaka</name></author><category term="AI" /><category term="인공지능" /><category term="딥러닝" /><category term="머신러닝" /><category term="컬럼" /><summary type="html">요즘 뉴스를 보면 인공 지능이 너무 자주 보인다.</summary></entry><entry><title type="html">[2019년 계획서] 하고 싶은게 많아서 얼마나 이루나 확인해보기 위해 작성하는 계획서</title><link href="http://localhost:4000/2019/01/01/year-start-post.html" rel="alternate" type="text/html" title="[2019년 계획서] 하고 싶은게 많아서 얼마나 이루나 확인해보기 위해 작성하는 계획서" /><published>2019-01-01T23:31:30+09:00</published><updated>2019-01-01T23:31:30+09:00</updated><id>http://localhost:4000/2019/01/01/year-start-post</id><content type="html" xml:base="http://localhost:4000/2019/01/01/year-start-post.html">&lt;h2 id=&quot;사람의-욕심은-밑도-끝도-없다&quot;&gt;사람의 욕심은 밑도 끝도 없다&lt;/h2&gt;
&lt;p&gt;회고록 작성하기 무섭게 벌써 올해의 계획을 너무 많이 그리고 있어서 내 스스로 얼마나 지키는 지, 또 얼마나 무참히 깨질지 궁금해서 작성해보기로 했다. 마침 또 한 해의 첫 날이니 이보다 좋은 날이 있을까&lt;/p&gt;

&lt;h2 id=&quot;체지방-감소와-근육량-증가&quot;&gt;체지방 감소와 근육량 증가&lt;/h2&gt;
&lt;p&gt;웬만한 사람들이 매년 세우는 계획 1. 하지만 본인쟝은 9월부터 해왔기 때문에 그저 허울뿐인 계획이 아닌거시야요 호호. 작년에는 거의 25kg를 뺐는데, 후반부에는 너무 힘들더라.. 한 달에 2kg 빼면 많이 빠졌네 싶을 정도. 해서 이번 달에는 최종적으로 체중 10kg 감량이 목표다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;물론 전체적인 체중 감량이 10kg 이고, 세부적으로 체지방은 13kg 감량, 근육량 3kg 증량을 목표로 하고 있다. 인바디 상으로는 거의 표준 이상을 가는 수준인데, 피티쌤이 몸무게에 비해 근육량이 너무 아쉽다고 해서… 불타오르기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;영어-회화-학원-다니기&quot;&gt;영어 회화 학원 다니기&lt;/h2&gt;
&lt;p&gt;웬만한 사람들이 매년 세우는 계획 2. 리얼클래스를 들으면서 열심히 영어공부를 하겠다던 나 자신이지만, 막상 외국인과 대화를 해볼 기회가 없어서 써볼 기회가 없다는 것이 매우 아쉬운 부분이다. 사실 회화 학원은 올해 다닐 지 내년에 다닐 지 매우 고민이 되는 부분이지만 일단 계획은 올해 안에 다녀보는 걸로 목표를 잡기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;해외여행-가기&quot;&gt;해외여행 가기&lt;/h2&gt;
&lt;p&gt;웬만한 사람들이 매년 세우는 계획 3. 올해는 개인적으로 홍콩이나 다낭 중 한 군데를 고르는 중이다. 홍콩은 그냥 맛있는게 많아보여서 가고 싶고 다낭은 마사지를 받고 싶다.. 요즘 개인적으로 시각적인 ASMR로 마사지를 보고 있는데 어우 너무 받고 싶다..&lt;/p&gt;

&lt;h2 id=&quot;수영-배우기&quot;&gt;수영 배우기&lt;/h2&gt;
&lt;p&gt;원래 작년 계획이었다. 17년 겨울, 파타야에서 물에 대한 공포증이 생겨서 이러다 죽겠구나 한 뒤로 수영을 꼭 배워야지 했는데 막상 수영을 할 엄두가 안났다. 사실 내 몸이 너무 더러워서 다른 사람들의 눈을 보호하기 위해 스스로 안가길 택했다가 맞는거다. 괜히 부끄러워서 안간 것이 아니다. 하지만 요번 여름까지 헬스를 주구장창 다닌다면 가을 쯤에는 그래도 상탈할 수준이 되지 않을까 하는 헛된 망상에 사로잡혀있으니, 이번 계획에도 추가해놓는걸로.&lt;/p&gt;

&lt;h2 id=&quot;캐글-콘테스트-시작&quot;&gt;캐글 콘테스트 시작&lt;/h2&gt;
&lt;p&gt;요즘 본인쟝의 최대 관심사는 AI, 그 중 딥러닝에 꽂혀있다. ‘밑바닥부터 시작하는 딥러닝’, ‘모두를 위한 파이썬’, ‘점프 투 파이썬’을 독파했다. 이제 텐서플로우 사용과 함께 캐글 콘테스트를 시작해보려고 한다. 이건 아마 텐서플로우 사용이 익숙해지면 바로 시작하지 않을까 싶다.&lt;/p&gt;

&lt;h2 id=&quot;바디-프로필-사진-찍기&quot;&gt;바디 프로필 사진 찍기&lt;/h2&gt;
&lt;p&gt;이건 음… 올해에 하려면 거의 12월 말에나 할 것 같은데, 일단 넣어놨다. 운동을 하는 사람들의 필수코스가 아닌가 싶다. 멋지게 만들어놨는데 멋지게 남겨놔야지. 나중에 생길 자식들이 아빠는 항상 배불뚝이었어? 라고 했을 때 보여줄 증거물로 남겨놔야한다. 엄마는 아빠의 멋진 몸에 반했단다 ㅎㅎ 라고 하는 것에 대한 증거물이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아마 올해 말 아니면 내년 초에 찍어볼까 싶다.&lt;/p&gt;

&lt;h2 id=&quot;진짜-욕심쟁이네&quot;&gt;진짜 욕심쟁이네&lt;/h2&gt;
&lt;p&gt;맞다. 욕심쟁이다. 근데 작년에도 하나하나 해보니까 그래도 결국엔 원하는 바를 웬만하면 다 이루더라. 올해도 급하게 생각하지 않고 하루라도 했으면 이룬게 아닌가? 라는 마음으로 도전해보는 것으로 하겠다.&lt;/p&gt;</content><author><name>devsaka</name></author><category term="계획" /><summary type="html">사람의 욕심은 밑도 끝도 없다 회고록 작성하기 무섭게 벌써 올해의 계획을 너무 많이 그리고 있어서 내 스스로 얼마나 지키는 지, 또 얼마나 무참히 깨질지 궁금해서 작성해보기로 했다. 마침 또 한 해의 첫 날이니 이보다 좋은 날이 있을까</summary></entry><entry><title type="html">[2018년 회고록] 쓸까말까 고민하다가 마지막 날에 급하게 작성하는 회고록</title><link href="http://localhost:4000/2018/12/31/year-end-post.html" rel="alternate" type="text/html" title="[2018년 회고록] 쓸까말까 고민하다가 마지막 날에 급하게 작성하는 회고록" /><published>2018-12-31T23:31:30+09:00</published><updated>2018-12-31T23:31:30+09:00</updated><id>http://localhost:4000/2018/12/31/year-end-post</id><content type="html" xml:base="http://localhost:4000/2018/12/31/year-end-post.html">&lt;h2 id=&quot;공사다망한-올해&quot;&gt;공사다망한 올해&lt;/h2&gt;
&lt;p&gt;2018년은 유난히 많은 일이 지나갔고, 인생의 전환점이 된 시기다.&lt;br /&gt;정리도 하고 반성도 할 겸 톺아보기로 했다. 블로그 글을 요즘 안써서 쓰려는 것은 아니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;※ 생각나는대로 계속 수정되는 글입니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;정든-첫-회사-퇴사&quot;&gt;정든 첫 회사 퇴사&lt;/h2&gt;
&lt;p&gt;16년 9월부터 다녔던 첫 회사를 1월 31일자로 관뒀다. 자체적으로 번아웃 상태이기도 했고, 올해 상반기 안에는 무조건 병역특례를 진행해야했기 때문이다. 리뉴얼하기로 했던 프로젝트도 어느 정도 마무리도 했겠다, 미래를 위해 퇴사를 결정했다.&lt;/p&gt;

&lt;h2 id=&quot;다이어트-시작&quot;&gt;다이어트 시작&lt;/h2&gt;
&lt;p&gt;대학교 시절에 70kg 초반을 돌던 내 몸무게는 2월 기준으로 111kg를 넘는 기염을 토했다. 살 안찌는 체질인 줄 알고 많이 먹었다가 그야말로 대-참사가 일어났다. 2월 23일 기준으로 건강을 위해 다이어트를 시작했다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2018YearEnd/running.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;초반에는 먹는 양을 줄이면서 조금씩 걷는 걸로 시작했다. 처음부터 너무 무리하면 무릎이 망가질 게 뻔했다. 식이는 샐러드, 닭가슴살 같은 음식을 먹는 게 아니라 그냥 세 끼 일반식으로 먹고 양을 조금 줄였다. 그렇게 천천히 빼다가 8월 일본 여행을 앞두고 사진은 이쁘게 찍혀야지라는 마음으로 7월부터 보라매 공원을 매일같이 나가 3시간 정도를 걸었다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;8월 12일 일본 출국 기준으로 몸무게 93kg까지 뺐다. 그 당시에는 참 많이 뺐다라고 생각했는데 지금 다시 사진보면 아직 한참 멀었구나 싶었다. 일본 음식은 너무 맛있어서 갔다온 즉시 2kg가 불어오른건 안비밀 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2018YearEnd/health.jpg&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;9월 18일 내 인생 처음으로 헬스를 등록하고 나갔다. 같은 회사 동료에게 간단한 기구 사용법과 자세를 배우고, 유튜브를 구독하며 나홀로 운동을 시작했다. 같은 헬스장을 다니는 동료와 꼭 매일 만나서 운동을 하자라고 이야기했지만 18년 12월 31일 기준, 딱 하루 만났다. 매달 20일 전후로 토요일 오전에 인바디를 측정하면서 내 몸의 변화가 보이고, 욕심이 생겨 닭가슴살과 단백질 보충제를 구입해서 먹으면서 운동을 진행한 결과, 31일 기준으로 체중이 86kg대로 내려왔다. 더욱이 놀라운 것은 오히려 근육량이 늘었다는 것이다(!) 사람들이 체중이 빠지면 근육도 같이 빠진다고 그래서 겁이 많이 났었는데 오히려 늘은 모습을 보고 내가 허투루 운동하지는 않았구나 싶었다. 정말 헬스하면서 삶이 바뀐 기분이다. 근육도 많이 붙었다. 유니클로 오프라인에서 바지를 살 수 있었을 때 진짜 감격했던 것 같은데, 지금은 L도 입는다 ㅎㅎ 허리사이즈 10 순삭!&lt;/p&gt;

&lt;h2 id=&quot;5일만에-회사를-짤리는-기적이-일어남&quot;&gt;5일만에 회사를 짤리는 기적이 일어남&lt;/h2&gt;
&lt;p&gt;첫 회사 1월에 퇴사하고 2월 5일쯤이었나 가산의 모 병역특례 회사에 입사했는데, 첫인상부터 너무 구렸다. 회사 인테리어는 물론이고 내 자리조차 치워놓지 않은 상황이었다. 다음 날에 내가 물티슈를 사서 책상을 닦으니 그제서야 내 옆에 앉은 팀장이 ‘아’ 한 마디 하고 넘어간 게 끝.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그리고 항상 기침을 달고 살았었는데, 이게 거슬렸던 건지 아니면 나를 자르려고 했는데 자를만한 사유가 없었던건지(회사에 일이 없었기도 했고, 나를 뽑았는데 막상 쓸 곳이 없었던 것 같다.) 5일차가 되는 날에 나가달라는 이야기를 들었다. 자기네 회사에서 사람이 죽었대나 뭐래나… 한달 월급은 더 줄테니 그냥 나가달라고 그러길래 마침 나도 나갈 생각을 하던 찰나에 잘됐다 싶어 덥석 물어버렸다. 그렇게 가산에서 5일을 일하고 35일치 일급을 받았다 ㅎㅎ&lt;/p&gt;

&lt;h2 id=&quot;하루에-두-번씩-면접도-보러-다님&quot;&gt;하루에 두 번씩 면접도 보러 다님&lt;/h2&gt;
&lt;p&gt;병특회사 구하는게 유난히 어렵기도 하고 수중에 돈이 얼마 없어서 이러다가 굶어죽겠다는 생각에 3월부터 급하게 일반 회사를 알아보기 시작했다. 하루에 두 번씩 면접도 보러다니면서 개인적으로 공부도 많이하고 여러모로 힘든 시기였다. 그 와중에 병특업체는 연봉을 최저 수준으로 준다고 이야기도 하고, 서울대 내에 있는 모 회사에서는 나에게 요구하는 스펙은 엄청 많으면서 내가 연봉을 불렀을 때 이 정도면 이 일 다 할 수 있겠냐고 협박 아닌 협박도 했었다. 사회생활을 적잖이 했다고 생각했는데 아직 멀었구나 생각했다.&lt;/p&gt;

&lt;h2 id=&quot;잠깐-팀장도-맡아봄&quot;&gt;잠깐 팀장도 맡아봄&lt;/h2&gt;
&lt;p&gt;4월에 뇌파 관련으로 프로젝트를 진행하는 회사에 입사했다. 연봉도 괜찮았고 프로젝트도 상당히 마음에 들었다. 다만 가자마자 팀장직을 맡아야한다는 청천벽력같은 소리와 회사 주변에 점심 식사를 할만한 곳이 별로 없었던 것은 매우 흠이었다. 처음에는 팀장이라는 말을 듣는 것이 상당히 어색해서 그냥 이름으로 불러달라고 했는데, 어느 순간엔가는 익숙해지더라.. 내 밑으로 나보다 나이 많은 사람이 들어왔는데 나보고 팀장님이라고 부르니까 이래도 되나 싶기도 하고.. 여러모로 기분이 묘했던 시기.&lt;/p&gt;

&lt;h2 id=&quot;타일러에게-홀렸다&quot;&gt;타일러에게 홀렸다&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://file.mk.co.kr/meet/neds/2018/01/image_readtop_2018_52174_15166974033181770.png&quot; alt=&quot;imageview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사람이 등따시고 배부르니까 자꾸 다른 곳에 눈이 간다. 영어 공부를 하고 싶다는 느낌이 너무 들어서 어떤 걸 들어볼까 하고 찾다가 ‘유 베뤌 낫’ 한 문장에 홀려서 리얼클래스를 질러버렸다. 요즘은 바빠서 잘 안듣지만 뭐… 3년이니까 언젠간 다 듣지 않을까 한다 ㅎㅎ;&lt;/p&gt;

&lt;h2 id=&quot;병역특례-시작&quot;&gt;병역특례 시작&lt;/h2&gt;
&lt;p&gt;사람이 등따시고 배부르니까 자꾸 다른 곳에 눈이 간다. 같은 문장을 또 본다고 생각하면 기분탓이다. 유난히 욕심이 많아서 그런 것 같다. 팀장하면서 병역특례 업체를 알아보다가 두 군데의 병역특례업체에 면접을 보고 합격했다. 한 군데는 게임회사였고 다른 한 군데는 지금 다니는 직장이었는데, 여기가 연봉을 더 많이 주고 집도 가까워서 여기로 왔다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 회사에 금요일에 면접을 보러 왔는데, 처음에 3개월정도 수습하고 나서 병특을 해주겠다고 했는데 그 때 나는 이미 게임회사에 붙었던 상황이라 무조건 이번 달 내로 해달라고 이야기를 했고, 사장님과 회의 후에 말을 해주겠다고 했다. 그 다음 날 토요일 오전 9시에 전화가 와서 1~2개월 해보고 병특을 해주겠다는 이야기를 해서 이번 달 내로 안해주면 못간다고 초강수를 두니 이번 달 내로 해주겠다고 확답을 줘서 ㅇㅇ 그럼 당연히 가야죠 ㅎㅎ 하고 입사했다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;입사하니 사장님과 이사님이 여기 들어오는데 우여곡절이 많았다면서?를 일주일 내내 이야기했다. 어지간했나보다 나는&lt;/p&gt;

&lt;h2 id=&quot;생전-처음-해보는-분야에-발을-들였다&quot;&gt;생전 처음 해보는 분야에 발을 들였다&lt;/h2&gt;
&lt;p&gt;병역특례로 들어온 업체에서 원단 설계 관련으로 국가 사업 프로젝트를 진행하는데 마감이 세 달 남았다는 이야기를 듣고 그냥 탈주할까 싶었다. 탈주하려면 병특 시작하기 전에 탈주해야하니까.. 애석하게도 사람인과 잡코리아를 그렇게 들락날락했는데 자리가 없더라.. 어쩔 수 없이 체념하고 이 프로젝트를 진행하기로 했다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;DirectX를 C#에서 쓸 수 있게 만들어놓은 SharpDX 소스코드와 기존 프로젝트를 보다가 이건 아니야.. 라고 생각하고 이걸 유니티로 이식했다. 그러면서 오랜만에 물리 공부도 하고(장력 ㅅㅂㄱ) 소스코드 분석도 하고, 원단 짜여지는 방법도 알아야할 거 같아서 지방에 있는 공장에도 몇 번 출장을 가서 여러 자문도 구했다. 결국 개발은 완료를 했고 잘 마무리가 되었다. 이 블로그에 3D 스플라인 메쉬 그리는 포스트가 다 이거 만들려고 했던거다.&lt;/p&gt;

&lt;h2 id=&quot;영우식-오사카-여행&quot;&gt;영우식 오사카 여행&lt;/h2&gt;
&lt;p&gt;회사에서 여름 휴가로 최소 5일 이상을 쓰라고 강권(!)당했다. 5일 그냥 집에 있기 싫어서 회사 옆사람한테 일본갈래요? 라고 말을 했던 게 실제로 이루어져서 개발팀 네 명이서 오사카로 출발했다. 진짜 빡빡한 계획을 세워서 다니는 여행이 아니라 정말 무계획으로 그때그때 끌리는 곳으로 갔다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2018YearEnd/IMG_2397.JPG&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하루는 저녁에 도톤보리에서 술을 먹다가 옆 테이블에 있는 일본인 무리와 점장과 친해져서 술먹다가 G2 클럽도 갔었다(생전 처음 클럽을 일본에서 갔다). 아무것도 모르는 우리는 춤만 췄는데, 다른 일본인들끼리는 ㅗㅜㅑㅗㅜㅑ 했다… 결국 그날 집에 새벽 여섯시에 들어가서 정오에 깼다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;제일 좋았던 것은 아사히 맥주 공장에 가서 맥주를 마신건데, 진짜 왜 와서 마시는 지 알거 같더라… 탄산은 덜하고 맛은 더 진하고 아주 꿀떡꿀떡 넘어감 ㅎㅎ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2018YearEnd/IMG_2611.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;신규-프로젝트-제안&quot;&gt;신규 프로젝트 제안&lt;/h2&gt;
&lt;p&gt;회사에서 새로운 먹거리를 찾기 위해 신규 프로젝트를 일본에 가있는 동안 생각해서 제출하라고 했다. 학교인 줄 알았다 ㅎㅎ;;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;도톤보리에 있는 파블로에서 치즈케이크 먹다가 생각난 아이디어가 있어서 정리해서 발표했더니 의외로 좋은 반응이 나와서 사업계획서를 작성했는데, 돌이켜 생각해보니 좋은 아이디어도 아니었고 부수적으로 들어가는 비용도 많았어서 프로젝트는 그대로 사라졌다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2018YearEnd/project.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;바이바이 프로젝트!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ios-네이티브-앱-개발도-해봄&quot;&gt;iOS 네이티브 앱 개발도 해봄&lt;/h2&gt;
&lt;p&gt;국가 사업 프로젝트가 끝나니 사장님 친구랑 같이 사업을 한번 진행해보자고 하면서 비콘을 이용해 앱을 만드는 사업을 진행하겠다고 하신다.. 이래서 사장님 친구랑 엮이면 힘들다&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;처음에는 유니티로 그냥 대충 때우려고 했는데 백그라운드에서 돌아가야한다고 해서 절망하고 스위프트 책을 폈다. 그 동안 C계열 언어만 공부했어서 스위프트에서 옵셔널이나 다른 개념들을 보면서 어떻게 이게 컴퓨터 언어냐고 스스로 꼰대놀이를 했던 게 절반인 것 같지만 그래도 파이썬 공부하고 다시 보니 편리한 언어는 맞는 것 같다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;회사 덕분에 스위프트 언어도 공부해보고 XCODE를 유니티 빌드 이외에 네이티브로 개발해본 것도 처음이었고 비콘 사용은 더더욱 처음이었다. 나름 혼자 구르면서 공부했던 재밌던 경험인 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;분야-변경을-하기로-마음을-먹었다&quot;&gt;분야 변경을 하기로 마음을 먹었다&lt;/h2&gt;
&lt;p&gt;올해는 병역특례만 되면 조용히 지내려고 마음을 먹었으나 정말 나는 욕심이 많은 인간이다. 병역특례가 끝나면 나는 뭘 해먹고 살까 생각을 하기 시작했다. 학과는 게임 관련으로 나와서 게임업계에서 꼭 일해보고 싶었는데 철야를 하며 살아오니 이젠 열정이 없어졌다. 굳이 야근하면서, 저연봉 받으면서 일하고 싶지 않았다. 그러다보니 요즘 가장 핫하다는 블록체인과 인공지능을 놓고 많은 고민을 했다. 학교 선후배, 직장 동료 가릴 것 없이 어느 분야로 가는 게 좋겠냐고 많은 상담을 했던 시기였던 것 같다. 결국 내가 선택했던 것은 블록체인이었다. 누군가가 나에게 해줬던 ‘인공지능도 결국 블록체인 위에서 돌거야’ 라는 말이 나를 블록체인으로 이끈 것 같다. 그래서 책도 사고 크립토좀비도 하고 열심히 공부도 했는데 공부하고 나서 뭘 준비해야할까 싶어 회사 구인공고란을 보는데 거의 웹 분야에서 블록체인을 접목해서 서비스를 진행하더라.. 아차싶더라니까&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yoonsupchoi.com/wp-content/uploads/2015/07/robot-doctor.png&quot; alt=&quot;imageview&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;흠... 이건 아닌듯
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 결정적으로 리플이 시총 2위로 치고 올라가는 순간, 그냥 나는 블록체인을 깔-끔하게 포기하고 인공지능으로 갈아탔다 ㅎㅎ 현재는 c231n 강의를 복사한 ‘밑바닥부터 시작하는 딥러닝’책을 독파하고 코세라 강의를 듣고 있다. 지금 고민은 영상처리로 갈지 NLP로 갈 지 고민하는 중이다. 아 파이썬 언어도 공부했다. 목표는 내년 여름에 딥러닝 쪽으로 회사를 뚫는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;반지하-탈출&quot;&gt;반지하 탈출&lt;/h2&gt;
&lt;p&gt;16년도에는 돈 없어서 반지하에 울며 겨자먹기로 들어가서 살았는데, 이번에는 돈이 좀 모여서 드디어 3층(같은건물 ㅋ)으로 이사갔다 ㅎㅎ 복비•이사비 일절 안들어가서 기분 좋았다. 당분간은 시즈박고 여기서 떠나지 않을 것이다. 집주인이 너무 좋으신 분&lt;/p&gt;

&lt;h2 id=&quot;유튜브-채널을-팠다&quot;&gt;유튜브 채널을 팠다&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2018YearEnd/youtube.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;처음에는 그냥 회사 일 준거 하기 싫어서 이거 해보겠습니다 하고 제안서를 냈는데 해보라고 해서 일이 커졌다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCx5FuGcBG6aFDJpWFjwDtjQ&quot;&gt;너드라이트&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;일단은 음성 비서와 관련해서 글을 쓰고 마우스와 그림판을 이용해 간단하게 영상을 만들었다. 사장님의 독촉으로 아마 다음 달부터는 정기적으로 컨텐츠가 올라갈 예정이다(살려주세요).&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 이 프로젝트 때문에 현재 블로그를 만든 건 덤 ㅎㅎ&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;구독, 좋아요, 댓글, 알림설정 부탁드려요 ㅎㅎ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;영우식-모각코-운영&quot;&gt;영우식 모각코 운영&lt;/h2&gt;
&lt;p&gt;12월에 시작해서 아직 한 번밖에 안했지만 개발팀끼리 주말에 모여 모각코를 진행했다. 생각보다 카페에서 모여서 같이 작업하는 게 능률이 좋기도 하고, 서로 각자 공부하는 것에 대해서 토론도 진행하고 하니 재밌었다. 왜 모각코를 하는 지 알 것 같은 기분.&lt;/p&gt;

&lt;h2 id=&quot;2018년을-정리하며&quot;&gt;2018년을 정리하며&lt;/h2&gt;
&lt;p&gt;살아오면서 매년 파도가 줄지 않고 점점 커지는 순탄치 못한 삶을 살았는데 올해가 유난히 더 심했던 것 같다. 어떻게 살았나 싶기도 하고.. 지나고 보니 항상 추억은 미화가 되더이다.. 쓰다보니 재밌어서 내년 초에 계획과 19년도 회고록도 작성할 것 같다.&lt;/p&gt;</content><author><name>devsaka</name></author><category term="회고록" /><summary type="html">공사다망한 올해 2018년은 유난히 많은 일이 지나갔고, 인생의 전환점이 된 시기다.정리도 하고 반성도 할 겸 톺아보기로 했다. 블로그 글을 요즘 안써서 쓰려는 것은 아니다.</summary></entry><entry><title type="html">[유튜브 영상] AI 음성비서의 과거와 미래</title><link href="http://localhost:4000/ai/2018/12/04/AI-Assistant-Video.html" rel="alternate" type="text/html" title="[유튜브 영상] AI 음성비서의 과거와 미래" /><published>2018-12-04T02:41:30+09:00</published><updated>2018-12-04T02:41:30+09:00</updated><id>http://localhost:4000/ai/2018/12/04/AI-Assistant-Video</id><content type="html" xml:base="http://localhost:4000/ai/2018/12/04/AI-Assistant-Video.html">&lt;p&gt;본 영상은 &lt;a href=&quot;https://catsirup.github.io/ai/2018/11/08/AI-Assistant.html&quot;&gt;AI 음성비서, 어디까지 왔을까?&lt;/a&gt;를 바탕으로 제작한 영상입니다.&lt;/p&gt;

&lt;iframe width=&quot;639&quot; height=&quot;350&quot; src=&quot;https://www.youtube.com/embed/33pp4CLJhms&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>devsaka</name></author><category term="AI" /><category term="음성인식" /><category term="컬럼" /><summary type="html">본 영상은 AI 음성비서, 어디까지 왔을까?를 바탕으로 제작한 영상입니다.</summary></entry><entry><title type="html">[칼럼] AI 음성비서, 어디까지 왔을까?</title><link href="http://localhost:4000/ai/2018/11/09/AI-Assistant.html" rel="alternate" type="text/html" title="[칼럼] AI 음성비서, 어디까지 왔을까?" /><published>2018-11-09T00:01:30+09:00</published><updated>2018-11-09T00:01:30+09:00</updated><id>http://localhost:4000/ai/2018/11/09/AI-Assistant</id><content type="html" xml:base="http://localhost:4000/ai/2018/11/09/AI-Assistant.html">&lt;h2 id=&quot;음성을-이용하여-컴퓨터와-상호작용을-시도하다&quot;&gt;음성을 이용하여 컴퓨터와 상호작용을 시도하다.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;음성&lt;/strong&gt;은 인간이 가진 가장 본질적인 커뮤니케이션이다.그래서 음성을 이용해 컴퓨터와 상호작용을 하는 것을 가장 이상적인 인터페이스로 여겼다. 1954년 IBM과 조지타운 대학이 공동으로 참여한 기계번역(Machine-translation) 기술 개발 프로젝트부터 시작해 많은 연구가 진행되었다.&lt;/p&gt;

&lt;p&gt;하지만 방대한 음성데이터를 처리하기 위한 컴퓨터의 연산 능력 부족과 낮은 인식률로 인해 영화 “아이언 맨”에 나오는 음성 인식 비서 자비스와 같은 기술은 아직 멀리 있는 듯 했다. 2011년 애플에서 시리가 등장하기 전까지는 말이다.&lt;/p&gt;

&lt;h2 id=&quot;최초의-상용화-ai-음성-비서-시리siri&quot;&gt;최초의 상용화 AI 음성 비서, 시리(Siri)&lt;/h2&gt;
&lt;p&gt;2011년 10월 4일, 아이폰 4s 발표와 함께 시리(Siri)가 발표되었다. 그 당시만 해도 단순한 음성 인식 기능을 애플처럼 포장했다라고 저평가 받았지만, &lt;strong&gt;AI가 뒷받침하는 음성 인식 개인비서라는 것이 밝혀지면서 주목을 받기 시작&lt;/strong&gt;했다. 그 이후에 2013년 안드로이드 4.4 Kitkat OS부터 Google Now 애플리케이션을 통해 음성검색 기능인 “OK Google” 서비스를 지원하기 시작하면서 본격적으로 일반인에게 음성 인식 기술이 빠르게 보급되기 시작했다. 하지만 이때까지는 “오늘의 날씨”와 같은 간단한 음성 인식 기능만 사용할 수 있었다.&lt;/p&gt;

&lt;h2 id=&quot;스마트폰을-넘어서-집-안에-ai-비서가-생기다&quot;&gt;스마트폰을 넘어서 집 안에 AI 비서가 생기다.&lt;/h2&gt;
&lt;p&gt;시리 이후 뚜렷한 진전이 없던 음성 비서 분야에서 “Always ready, connected, and fast. Just Ask” 라는 문구와 함께 2014년 11월 아마존에서 스마트 스피커 “에코”가 등장했다.&lt;/p&gt;

&lt;iframe width=&quot;639&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/FQn6aFQwBQU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;“알렉사” 라는 별명을 가진 음성 인식 비서가 내장된 스마트 스피커였다. 시리처럼 날씨, 시간 뿐만 아니라 그 날의 주요 뉴스 브리핑, 스포츠 게임 결과, 심지어 홈 오토메이션(블루투스나 와이파이로 조절할 수 있는 물건들)이 되는 게 가능하도록 디자인 된 전등, 전원 스위치는 알렉사가 해결해줄 수 있었다. 잠자리에 누웠다가 전원을 끄기 위해 다시 일어나야 하는 불편함 대신, “불 꺼(turn the light off)” 한 마디로 해결할 수 있었다.&lt;/p&gt;

&lt;p&gt;또한 아마존은 자사 제품 중 “대시”처럼 에코로 쇼핑을 가능하게 했다. 디지털 음원 뿐만 아니라 다양한 실물 제품을 장바구니에 넣고 현재 주문 상태를 확인하고 주문할 수 있게 했다. 물론 제한 사항은 존재했지만 음성 인식 기능이 엄청나게 발전했다라고 느꼈다. 에코가 대 성공을 거둔 이후 글로벌 IT 시장을 주도하고 있는 메이저 기업들은 자체 AI 음성 비서 개발은 물론 이의 플랫폼화를 위해 보급 확대로 시장 선점을 도모하기 시작했다. SKT 누구, KT 기가지니 등 한국에서도 음성 인식 비서가 출시됐고 현재도 계속해서 발전하고 있는 중이다.&lt;/p&gt;

&lt;h2 id=&quot;ai-음성-비서가-직접-전화를-걸어-미용실을-예약했다&quot;&gt;AI 음성 비서가 직접 전화를 걸어 미용실을 예약했다.&lt;/h2&gt;
&lt;p&gt;2018년 5월 8일, 구글 I/O 개발자 컨퍼런스에서 &lt;strong&gt;듀플렉스(Duplex)&lt;/strong&gt; 가 공개됐을 때, 경악을 금치 못했다. 여태껏 봐왔던 AI 비서와는 차원이 달랐다.&lt;/p&gt;
&lt;iframe width=&quot;639&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/m6sWsd_tkAs&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;진짜 사람과 똑같이 전화 통화가 가능해진 구글의 인공지능 데모 시연 (한, 영 동시자막), Project스노우볼&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Google Now에서 업그레이드 된 Google Assistant로 미용실 약속을 사용자가 잡아놓으면, Google Assistant가 미용실에 직접 전화를 걸어 미용사와 통화를 해 예약을 잡아주는 방식이었다. 더욱 놀라웠던 것은 대화 중 긍정을 뜻하는 ‘으흠’ 이나 잠시 머뭇거리는 ‘음…’ 등을 사용해 실제 사람처럼 말을 했다.&lt;br /&gt;
&lt;img src=&quot;https://1.bp.blogspot.com/-WdgRuOg6lwc/WvEZTDLYg_I/AAAAAAAACsM/QNLSl4Yid9wKij_2KNpCRiXjiyeptu9vgCLcBGAs/s640/rnn_big.png (preview)&quot; alt=&quot;Change World preview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이러한 듀플렉스의 핵심은 구글의 기계학습 AI 기술 &lt;strong&gt;TFX(TesorFlow Extended)&lt;/strong&gt; 라고 한다. 익명 처리된 수십만 건의 온라인 예약 음성 녹음을 통해 반복 학습한 결과로 만들어졌다고 한다. 아직 테스트 버전으로 출시가 되었지만 조만간 제한된 영역에서 사용을 할 수 있을 것이라고 했다.&lt;/p&gt;

&lt;h2 id=&quot;앞으로는-어떻게-ai-음성-비서가-발달하게-될까&quot;&gt;앞으로는 어떻게 AI 음성 비서가 발달하게 될까?&lt;/h2&gt;
&lt;p&gt;AI 비서는 우리 생활에서 스마트폰으로 날씨를 알려주던 기능부터 홈 오토메이션이 되는 스마트 스피커, 그리고 이젠 미용실이나 레스토랑까지 전화해서 예약을 해주는 수준까지 발달했다. 이제 AI 음성 비서는 스마트폰, 스피커를 넘어 가정용 기기나 자동차 등 다양한 디바이스 분야로 영역을 확대한다고 한다. 앞서 이야기했듯 “음성”을 이용하는 것은 인간과 컴퓨터의 상호작용에 가장 이상적인 인터페이스기 때문이다. 스마트폰의 등장으로 휴대전화의 패러다임이 바뀌었듯이 AI를 기반으로 한 음성 비서의 확산은 향후 대부분의 HW 기기 산업 발전 방향에 커다란 영향을 줄 것이다. 이제 우리는 냉장고와도 음성으로 대화를 해 필요한 재료를 주문할 수도 있을 것이고, 자동차에 음성으로 길을 묻는 세상이 도래할 것이다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;음성인식 AI 비서 시장의 현황과 시사점. 최지혜, 이선희&lt;/li&gt;
  &lt;li&gt;플랫폼으로 진화하는 인공지능(AI) 음성비서. 조성선, 김용균&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ai.googleblog.com/2018/05/duplex-ai-system-for-natural-conversation.html&quot;&gt;https://ai.googleblog.com/2018/05/duplex-ai-system-for-natural-conversation.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>devsaka</name></author><category term="AI" /><category term="음성인식" /><category term="컬럼" /><summary type="html">음성을 이용하여 컴퓨터와 상호작용을 시도하다. 음성은 인간이 가진 가장 본질적인 커뮤니케이션이다.그래서 음성을 이용해 컴퓨터와 상호작용을 하는 것을 가장 이상적인 인터페이스로 여겼다. 1954년 IBM과 조지타운 대학이 공동으로 참여한 기계번역(Machine-translation) 기술 개발 프로젝트부터 시작해 많은 연구가 진행되었다.</summary></entry><entry><title type="html">[iOS] 비콘이 간헐적으로 통신이 끊길 때 해결법</title><link href="http://localhost:4000/swift/2018/11/02/iOS-Swift-iBeacon-Error.html" rel="alternate" type="text/html" title="[iOS] 비콘이 간헐적으로 통신이 끊길 때 해결법" /><published>2018-11-02T22:45:59+09:00</published><updated>2018-11-02T22:45:59+09:00</updated><id>http://localhost:4000/swift/2018/11/02/iOS-Swift-iBeacon-Error</id><content type="html" xml:base="http://localhost:4000/swift/2018/11/02/iOS-Swift-iBeacon-Error.html">&lt;p&gt;앞서 개발하고 있던 비콘 프로젝트에서 간간히 비콘과의 연결이 끊어졌다가 다시 잡히는 현상이 발생했다.&lt;br /&gt;
검색해보니 altBeacon이고 iBeacon이고 같은 증상이 나타나는 것 같다.&lt;br /&gt;&lt;br /&gt;
회사 내부에서 회의하고 내린 결론은 다른 앱이 백그라운드에서 실행되거나, 다른 앱을 사용하고 있을 때 콜백이 늦게 돌아서 그 사이에 신호를 못잡으면 바로 비콘과의 연결이 끊어졌다고 체크하는 것이 문제였다.&lt;br /&gt;&lt;br /&gt;
그래서 간단하게 비콘이 없다고 n 번 정도 체크가 되면 그 때 비콘과의 연결이 끊어졌다고 체크하는 기능을 만들어주기로 했다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lostCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 체크를 도와줄 변수&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLLocationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didRangeBeacons&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beacons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CLBeacon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLBeaconRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beacons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lostCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nearestBeacon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beacons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nearestBeacon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proximity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;immediate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;near&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;               
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;far&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;            
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lostCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lostCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 3 번 연속으로 비콘이 없다고 판단했을 때, 이 곳에서 비콘이 없다고 체크해줌.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>devsaka</name></author><category term="Swift" /><category term="Develop" /><category term="iBeacon" /><category term="iOS" /><summary type="html">앞서 개발하고 있던 비콘 프로젝트에서 간간히 비콘과의 연결이 끊어졌다가 다시 잡히는 현상이 발생했다. 검색해보니 altBeacon이고 iBeacon이고 같은 증상이 나타나는 것 같다. 회사 내부에서 회의하고 내린 결론은 다른 앱이 백그라운드에서 실행되거나, 다른 앱을 사용하고 있을 때 콜백이 늦게 돌아서 그 사이에 신호를 못잡으면 바로 비콘과의 연결이 끊어졌다고 체크하는 것이 문제였다. 그래서 간단하게 비콘이 없다고 n 번 정도 체크가 되면 그 때 비콘과의 연결이 끊어졌다고 체크하는 기능을 만들어주기로 했다.</summary></entry><entry><title type="html">[Unity] Unable to convert classes into dex format</title><link href="http://localhost:4000/unity/2018/10/30/Unity-MultiDex-Solution.html" rel="alternate" type="text/html" title="[Unity] Unable to convert classes into dex format" /><published>2018-10-30T06:02:30+09:00</published><updated>2018-10-30T06:02:30+09:00</updated><id>http://localhost:4000/unity/2018/10/30/Unity-MultiDex-Solution</id><content type="html" xml:base="http://localhost:4000/unity/2018/10/30/Unity-MultiDex-Solution.html">&lt;h2 id=&quot;에러-내용&quot;&gt;에러 내용&lt;/h2&gt;
&lt;p&gt;유니티(5.x버전)에서 안드로이드 빌드를 하다가 다음과 같은 에러가 발생했다.&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/Multidex/m1.PNG&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;br /&gt;
콘솔에서 확인해보니 다음과 같은 이유로 빌드에 실패했다고 뜬다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;trouble writing output: Too many field references to fit in one dex file: 90410; max is 65536.
You may try using multi-dex. If multi-dex is enabled then the list of classes for the main dex list is too large.&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;하나의 dex 파일에 참조가 너무 많아서 생기는 버그였다.(최대 65536).이를 해결하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;multi-dex&lt;/code&gt; 를 사용하라고 한다.&lt;br /&gt;&lt;br /&gt;
원인을 찾아보니 한 프로젝트 안에 너무 많은 플러그인을 넣은 것이 문제였다. 필요없는 플러그인을 지워 길이를 맞추면 해결되는 문제다.&lt;br /&gt;&lt;br /&gt;
하지만 이 프로젝트에서 뺄 수 있는 플러그인이 아무 것도 없기 때문에 multi-dex를 사용하는 방향으로 잡았다.&lt;/p&gt;

&lt;p&gt;방법은 다음과 같다.&lt;/p&gt;

&lt;h2 id=&quot;사전-준비&quot;&gt;사전 준비&lt;/h2&gt;
&lt;p&gt;안드로이드 스튜디오(Android Studio)가 필요하다. 없으면 안드로이드 스튜디오를 다운로드한다.설치는 아래 링크에서 진행할 수 있다.&lt;br /&gt;
&lt;a href=&quot;https://developer.android.com/studio/index.html?hl=ko&quot;&gt;설치링크&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;에러-해결-방법&quot;&gt;에러 해결 방법&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;File-&amp;gt;Build Settings 클릭&lt;/li&gt;
  &lt;li&gt;오른쪽 하단에 Build System에서 Gradle(New)로 선택, 바로 밑에 있는 Export Project에 체크를 한다.&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/Multidex/m2.PNG&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Export 버튼을 누른다&lt;/li&gt;
  &lt;li&gt;안드로이드 스튜디오를 열어 ‘Open an existing Android Studio project’ 클릭, 생성된 폴더를 선택해 프로젝트를 연다.&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/Multidex/m3.PNG&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;프로젝트가 켜지면, 왼쪽에 ‘1.Project’ 를 누르고 Gradle Scripts/build.gradle을 클릭한다.&lt;/li&gt;
  &lt;li&gt;이 부분에서 마지막에 gradle : 2.X.X를 최신버전으로 맞춰준다. (필자 작성 기준, 2.3.2 가 최신버전. 아마 다르게 적어도 나중에 최신버전으로 자동으로 컨버팅 되는 것 같다.)
    &lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.tools.build:gradle:2.3.2'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;바로 밑 dependencies 에 다음 줄을 추가한다.
    &lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.support:multidex:1.0.1'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;android { 로 시작하는 부분으로 가서, defalutConfig 안에 다음 코드를 삽입한다.
    &lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buildToolsVersion&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'27.0.1'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;defaultConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;targetSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;applicationId&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.회사이름.프로젝트이름'&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;multiDexEnabled&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;부분만&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;추가하면&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;됨&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;8번 영역에서 android { } 구간 안에 다음 코드를 삽입한다.
    &lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dexOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;javaMaxHeapSize&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;4g&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;다시 왼쪽 1.Project로 가서 ‘프로젝트이름/manifests/AndroidManifest.xml’을 클릭한다.&lt;/li&gt;
  &lt;li&gt;application 태그 제일 끝에 다음 코드를 삽입한다.
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android:name=&quot;android.support.multidex.MultiDexApplication&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;바로 위에 Sync Now 버튼을 클릭&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/Multidex/m4.PNG&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;상단 메뉴에서 Build -&amp;gt; Generate Signed APK 클릭&lt;/li&gt;
  &lt;li&gt;유니티에서 Player Settings/Publishing Settings 에서 쓰던 Keystore 등록하기(없으면 Create new 버튼을 눌러 새로 만들면 된다)&lt;/li&gt;
  &lt;li&gt;패스워드 등 기본 정보 입력 후 finish 버튼을 누르면 빌드가 된다. 빌드파일은 보통 프로젝트 폴더 안에 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;후기&quot;&gt;후기&lt;/h2&gt;
&lt;p&gt;이렇게 하면 성공적으로 apk 파일을 뽑을 수 있다. 13~15 부분은 한번 등록해놓으면 다음부터는 패스워드만 입력하면 바로 빌드할 수 있다.&lt;br /&gt;&lt;br /&gt;
하… 그래도 1번부터 12번까지 다시하는건 매번해도 귀찮다.&lt;/p&gt;</content><author><name>devsaka</name></author><category term="Unity" /><category term="Develop" /><category term="Android" /><category term="MultiDex" /><summary type="html">에러 내용 유니티(5.x버전)에서 안드로이드 빌드를 하다가 다음과 같은 에러가 발생했다. 콘솔에서 확인해보니 다음과 같은 이유로 빌드에 실패했다고 뜬다. &quot;trouble writing output: Too many field references to fit in one dex file: 90410; max is 65536. You may try using multi-dex. If multi-dex is enabled then the list of classes for the main dex list is too large.&quot; 하나의 dex 파일에 참조가 너무 많아서 생기는 버그였다.(최대 65536).이를 해결하기 위해서는 multi-dex 를 사용하라고 한다. 원인을 찾아보니 한 프로젝트 안에 너무 많은 플러그인을 넣은 것이 문제였다. 필요없는 플러그인을 지워 길이를 맞추면 해결되는 문제다. 하지만 이 프로젝트에서 뺄 수 있는 플러그인이 아무 것도 없기 때문에 multi-dex를 사용하는 방향으로 잡았다.</summary></entry><entry><title type="html">[iOS] Swift를 이용해 비콘을 연동해보자</title><link href="http://localhost:4000/swift/2018/10/30/iOS-Swift-iBeacon.html" rel="alternate" type="text/html" title="[iOS] Swift를 이용해 비콘을 연동해보자" /><published>2018-10-30T04:53:59+09:00</published><updated>2018-10-30T04:53:59+09:00</updated><id>http://localhost:4000/swift/2018/10/30/iOS-Swift-iBeacon</id><content type="html" xml:base="http://localhost:4000/swift/2018/10/30/iOS-Swift-iBeacon.html">&lt;h2 id=&quot;1-시작하면서&quot;&gt;1. 시작하면서&lt;/h2&gt;
&lt;p&gt;회사에서 Swift와 비콘을 연동해 iOS Native 앱을 만드는 프로젝트를 진행하고 있다. 생판 배워본 적도 없는 Swift를 공부하고 구글링을 하면서 하나하나 만들어가는 중인데, 그 중에서 아이폰과 비콘을 연동하는 방법에 대해서 정리를 하기 위해 작성한다.&lt;/p&gt;

&lt;p&gt;코드와 사전 지식은 다음 링크를 참고했다.&lt;br /&gt;
참조링크 : &lt;a href=&quot;http://baked-corn.tistory.com/121&quot;&gt;[ios] iBeacon - basic, 이동건의 이유있는 코드&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-사전-지식&quot;&gt;2. 사전 지식&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;비콘이란 근거리 무선 통신 기술을 바탕으로 신호를 발산하는 소형 장치를 일컫는 말이다.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;NFC의 경우에는 상당히 근접한 거리만 가능, 비콘은 블루투스 페어링 과정을 거쳐야 한다. &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;비콘을 탐지하는 방법에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Monitoring&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ranging&lt;/code&gt;이 있다. 쉽게 이야기하면 Monitoring(모니터링)은 범위 내에 비콘이 있다/없다 로만 판별하며 Ranging(레인징)은 범위 내에 있을 경우, 스마트폰과 비콘 사이의 거리가 몇 m인지 실시간으로 체크해준다.(여기서 몇 m라고 하는 이유는 비콘마다 설정값이 다르지만 최대 50m까지 읽을 수 있다.)&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;GPS와 비콘의 차이는 GPS의 경우 실외에서는 거리의 차이에 상관없이 위치 탐색이 가능하나 거리 오차가 있고, 실내에서 사용이 불가능한 반면 비콘의 경우 거리는 상대적으로 짧으나 실내에서도 사용이 가능하다. 또한 전력 소모도 적다&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;비콘은 신호를 보낼 수만 있고 받을 수는 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-사전-준비&quot;&gt;3. 사전 준비&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;안드로이드와 달리 아이폰은 오로지 &lt;code class=&quot;highlighter-rouge&quot;&gt;iBeacon&lt;/code&gt;만 읽을 수 있다. 먼저 안드로이드로 프로젝트를 진행하던 사원은 &lt;code class=&quot;highlighter-rouge&quot;&gt;altBeacon&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;iBeacon&lt;/code&gt;등 상관없이 읽을 수 있는 듯 했지만, 아이폰은 전혀 그러지 못했다. 오히려 애플다웠다.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;이 뿐만이 아니다. 비콘 고유의 아이디라고 할 수 있는&lt;code class=&quot;highlighter-rouge&quot;&gt; uuid조차 앱 내부에서 고정으로 설정&lt;/code&gt;해줘야 그 uuid를 가지고 있는 비콘만 읽을 수 있었다. 덕분에 major와 minor로 요리조리 암호화 복호화를 해야만 했다. &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;소스코드 외적으로도 설정해줘야할 것이 많았다. 우선 위치 접근 허용을 &lt;code class=&quot;highlighter-rouge&quot;&gt;항상 허용&lt;/code&gt;으로 해야 백그라운드에서도 정상적으로 앱이 작동한다(백그라운드에서 돌리지 않을 것이면 앱을 사용할 때만 허용해도 된다.) 개발 후에는 설정에서 개발한 앱에 들어가 위치 접근 허용을 끄면 된다. &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;다음으로는 info.plist에서 다음과 같이 작성해준다. 둘 다 작성해줘야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSLocationAlwaysAndWhenInUseUsageDescription&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;위치 접근 항상 허용&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSLocationWhenInUseUsageDescription&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;앱을 사용할 때만 허용&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;또한 Project navigator-&amp;gt;app target-&amp;gt;Capabilities-&amp;gt;Background Modes에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Location updates&lt;/code&gt;을 체크해줘야한다.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;블루투스 또한 항상 켜져있어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-코드-작성&quot;&gt;4. 코드 작성&lt;/h2&gt;
&lt;p&gt;iBeacon을 쓰기 위해서 Swift에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreLocation&lt;/code&gt;을 import해줘야 한다.&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CoreLocation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그리고 델리게이트를 작성해줘야 정상적으로 작동하기 때문에 클래스에 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;CLLocationManagerDelegate&lt;/code&gt;를 추가한다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLLocationManagerDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다음 CLLocationManager형인 locationManager를 생성해주고, 델리게이트를 넣어준 후 위치권한과 위치 업데이트를 시작한다.&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;locationManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLLocationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLLocationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// locationManager 초기화.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;// 델리게이트 넣어줌.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;requestAlwaysAuthorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// 위치 권한 받아옴.&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startUpdatingLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// 위치 업데이트 시작&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowsBackgroundLocationUpdates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 백그라운드에서도 위치를 체크할 것인지에 대한 여부. 필요없으면 false로 처리하자.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pausesLocationUpdatesAutomatically&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 이걸 써줘야 백그라운드에서 멈추지 않고 돈다&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 작성하면 델리게이트가 작동한다.&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 위치 서비스에 대한 권한이 받아들여지면 MonitorBeacons() 함수 호출&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLLocationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didChangeAuthorization&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLAuthorizationStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorizedAlways&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;monitorBeacons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Monitoring 진행이 가능한 상태면 Monitoring 진행&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;monitorBeacons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLLocationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isMonitoringAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLBeaconRegion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 디바이스가 이미 영역 안에 있거나 앱이 실행되고 있지 않은 상황에서도 영역 내부 안에 들어오면 백그라운드에서 앱을 실행시켜&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 헤당 노티피케이션을 받을 수 있게 함&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;getBeaconRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notifyEntryStateOnDisplay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 영역 안에 들어온 순간이나 나간 순간에 해당 노티피케이션을 받을 수 있게 함&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;getBeaconRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notifyOnExit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;getBeaconRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notifyOnEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startMonitoring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBeaconRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CLLocation Monitoring is unavailable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 모니터링이 실행된 후 영역의 판단이 이루어지는 순간에 이 메소드가 실행&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLLocationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didDetermineState&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLRegionState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 영역 안에 들어온 순간&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startRangingBeacons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBeaconRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outside&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 영역 밖에 나간 순간&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stopRangingBeacons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBeaconRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unknown&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Now unknown of Region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLLocationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didRangeBeacons&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beacons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CLBeacon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLBeaconRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 연결할 수 있는 비콘이 있는 경우&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beacons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nearestBeacon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beacons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 가장 가까이 있는 비콘을 내 비콘으로 잡자.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 거리에 맞게 원하는 코드를 작성하면 끝&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nearestBeacon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proximity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;immediate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
                
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;near&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
                
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;far&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
                
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 연결할 수 있는 비콘이 없는 경우&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;또한 비콘이 범위내에 있는지 없는지 체크해주는(모니터링 해주는) 함수도 있다.&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLLocationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didEnterRegion&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;비콘이 범위 내에 있음&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLLocationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didExitRegion&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;비콘이 범위 밖을 벗어남&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-마무리하면서&quot;&gt;5. 마무리하면서&lt;/h2&gt;
&lt;p&gt;비콘을 쓰기 위해 구글링을 여럿했지만 최신 문서가 많이 없기 때문에 조금 힘들었다. 이 글을 보고 좀 더 편하게 개발을 할 수 있었으면 좋겠다.&lt;/p&gt;</content><author><name>devsaka</name></author><category term="Swift" /><category term="Develop" /><category term="iBeacon" /><category term="iOS" /><summary type="html">1. 시작하면서 회사에서 Swift와 비콘을 연동해 iOS Native 앱을 만드는 프로젝트를 진행하고 있다. 생판 배워본 적도 없는 Swift를 공부하고 구글링을 하면서 하나하나 만들어가는 중인데, 그 중에서 아이폰과 비콘을 연동하는 방법에 대해서 정리를 하기 위해 작성한다.</summary></entry><entry><title type="html">[iOS] 스위프트에서 화면 전환하는 법</title><link href="http://localhost:4000/swift/2018/10/30/Swift-Scene-Change.html" rel="alternate" type="text/html" title="[iOS] 스위프트에서 화면 전환하는 법" /><published>2018-10-30T04:25:59+09:00</published><updated>2018-10-30T04:25:59+09:00</updated><id>http://localhost:4000/swift/2018/10/30/Swift-Scene-Change</id><content type="html" xml:base="http://localhost:4000/swift/2018/10/30/Swift-Scene-Change.html">&lt;p&gt;Swift를 겉핥기 식으로 공부한 뒤, iOS 프로젝트를 진행하는 중이었다.&lt;br /&gt;
개발 중 메인으로 쓰여지는 홈 화면에서 A 뷰 컨트롤러로 갔다가 다시 메인으로 오니 Popup Alert창이 떠야하는 데 뜨질 않는 버그가 발생했다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;코드 상에서 잘못된 부분이 없길래 A 뷰 컨트롤러로 가는 코드만 지웠더니 알람창은 제대로 뜨니 뷰 컨트롤러 간의 이동이 잘못된 것을 감지하고 애꿎은 Show, Push, Modal만 바꿨다.&lt;br /&gt;
도저히 안되겠어서 검색했더니 iOS에서 화면 전환 개념은 4가지 정도 되는 것 같다.&lt;/p&gt;

&lt;p&gt;참조링크 : &lt;a href=&quot;https://medium.com/@mingdaejo/ios-%ED%99%94%EB%A9%B4-%EC%A0%84%ED%99%98-b979188a1a82&quot;&gt;iOS 화면 전환 - 조민재&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;여기서 나는 다음 코드와 같이 4번인 객체 세그웨이를 사용해서 화면을 전환하는 방식을 사용했는데(스토리보드에서 시각적으로도 보기 편했다.)&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;performSegue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 경우의 문제점은 뷰 컨트롤러가 바뀔 때마다 새로운 인스턴스를 생성해서 최상층으로 올라온다는 점이다. 이게 뭐가 문제냐면 Main에서 A를 갔다가 A에서 다시 Main을 가니 Main-A-Main으로 Main이 두 개 돌아간다는 것이었다.&lt;/p&gt;

&lt;p&gt;그래서 다시 메인으로 돌아와야하는 뷰 컨트롤러에는 다음과 같은 코드로 수정했다.
예를 들어 A-&amp;gt;B-&amp;gt;A 로 넘어가야 하는 구조라고 가정하자.&lt;br /&gt;&lt;br /&gt;
먼저 A.Swift의 코드를 보자.&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// B 컨트롤러 뷰를 가져온다. &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Storyboard에서 뷰 컨트롤러에서 identifier가 미리 설정이 되어있어야 한다. &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;webPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiateViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WebPageView&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// B 컨트롤러 뷰로 넘어간다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 다음 B.Swift에서 버튼 클릭 등 이전 뷰로 돌아가야할 때 다음과 같이 작성한다.&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// B 컨트롤러를 지운다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원리는 A에서 B로 올라갈 때 A 위에 B가 스택처럼 쌓이는데 dismiss를 해주면서 B를 지워주는 것이다. 그러면 깔끔하게 A만 남는다.&lt;br /&gt;&lt;br /&gt;
역시 삽질을 해야 잡지식이 는다.&lt;/p&gt;</content><author><name>devsaka</name></author><category term="Swift" /><category term="Develop" /><category term="Segue" /><category term="화면 전환" /><summary type="html">Swift를 겉핥기 식으로 공부한 뒤, iOS 프로젝트를 진행하는 중이었다. 개발 중 메인으로 쓰여지는 홈 화면에서 A 뷰 컨트롤러로 갔다가 다시 메인으로 오니 Popup Alert창이 떠야하는 데 뜨질 않는 버그가 발생했다.</summary></entry></feed>